Database: organized collection of data, generally stored and accessed electronically from a computer system

Flat-File Database
- simple data
- inflexible
- inefficient
- Poor performance

Database Management System(DBMS)
- Optimised for data storage & retrieval: data 저장 및 읽는데 최적화
- handles complex data: 복잡한 data 다룸
- concurrent accessed: 안전하게 동시다발 접근가능
- data security: 보안 우수
- complex itself: 복잡해서 배우기 어려움

SQL(Structured Qudry Language) : 관계형 DB
: Designed for managing data relational databases

NoSQL: 관계가 없는 DB

(since 1990)
SQL DB: organized collection of one of more Tables of rows and columns
SCHEMA: 숫자 type ID, 문자열 type 이름 등
-> Data integrity: data의 온전함, 진실성 보전(다른 종류,type data를 넣을 수 없기때문)

Basic structure of an SQL Query
- SELECT: lists a record attributes to be copied
- FROM: lists tables(relations) to be used
- WHERE: corresponds to selection predicate

Most Popular SQL databases
- ORACLE
- SQL Server(Microsoft)
- MySQL: Free
- SQLite: Free
- PostgreSQL: Free

-------------------------------------------------------------
19.4 NoSQL 그 모든것(since 1998)
1. Don't have rigid, strict schema(schema-less)
2. Non-relational, hence cluster-friendly: 관계형X -> 저장하고 자하는 data를 여러개로 분산해서 sever에서 관리하기 용이
3. Address specific prolems or use cases

The most commonly used NoSQL DB in Web Dev
< mongoDB >
- primary unit of data is a document
- Documents organised in collections
- Document structure is not enforced by DB
- Each documents is self-contained
- Data duplication instead of relation
 => NoSQL에서 관계를 가지기 시작하면 장점이 사라짐

Most popular NoSQL databases
- cassandra (Wide column)
- neo4j (Graph)
- Redis (Key-value)
- Cloud Bigtable
- mongoDB (Document)
- DynamoDB (Key-value)
-------------------------------------------------------------

19.5 ORM & ODM

ORM (Object Relational Mapping)
: 코드에 여러가지 object가 있다면 이것을 DB에 저장하기 위해 우리가 스스로 어떻게 object를 table로 변환할 건지, 어떻게 SCHEMA를 만들고 분할할건지, DB에서 어떻게 DB를 읽어와서 어떻게 object로 변환할 건지 자동으로 해결해줌

GOOD
- Business Logic
- No Bolierplate Code: 반복 코드 줄여줌
- DB Abstraction: 다른 SQL과 호환이 잘됨
- SCHEMA migration: code 변경시 자동 처리

BAD
- Suboptimal queries: ORM API로는 상세한 query를 할수없음
                     서로 다른 ORM마다 다른 API를 제공하기떄문  
- SQL Knowledge: SQL 지식이 없다면 효율적인 query 못할 수 있음
- Complex Queries: 복잡한 query를 하기 힘듬

ORM 종류
- TYPEORM
- Sequeliz
- Prisma

ODM(Object Document Mapper) 종류
- mongoose
- mongoDB


